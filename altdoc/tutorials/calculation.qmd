---
title: "Seat allocation"
knitr: 
  opts_chunk: 
    dev: "ragg_png"
    fig.width: 7
    fig.height: 5
    dpi: 150
toc: true
---

```{r}
#| label: setup
#| message: false
library(PRcalc)
library(tidyverse)
```

## Import sample dataset

The first column contains the names of political parties, and the subsequent columns contain the respective number of votes for each party.

```{r}
#| label: dataset
# Japanese upper house election in 2019
# Number of blocks = 1 (national block)
data("jp_upper_2019")
jp_upper_2019

# Japanese lower house election in 2019
# Number of blocks = 11 (regional blocks)
data("jp_lower_2021")
jp_lower_2021
```

## Calculation

To calculate seat allocation using the `prcalc()` function, you need to specify the following: data (`x`), electoral magnitude (`m`), and allocation method (`method`). Below is an example of allocating 50 (`m = 50`) seats using the D'Hondt method (`method = "dt"`) with the `jp_upper_2019` dataset. In this case, the length of `m` is 1 because number of blocks is 1.

```{r}
#| label: calculation-1
# Example of national block (D'Hondt/Jefferson method)
obj1 <- prcalc(jp_upper_2019, m = 50, method = "dt")
obj1
```

In a block system, you need to specify `m` for each block separately. Since `jp_lower_2021` has 11 blocks, the length of `m` also needs to be 11.

```{r}
#| label: calculation-2
# Example of regional block (D'Hondt/Jefferson method; 11 blocks)
obj2 <- prcalc(jp_lower_2021, 
               m = c(8, 13, 19, 22, 17, 11, 21, 28, 11, 6, 20), 
               method = "dt")
obj2
```

{PRcalc} offers various allocation methods. Below is an example similar to the previous one, but with the allocation methods changed to the Hare-Niemeyer (`"hn"`) method and the Sainte-Laguë method (`"sl"`).

```{r}
#| label: calculation-3
# Hare-Niemeyer method
obj3 <- prcalc(jp_lower_2021, 
               m = c(8, 13, 19, 22, 17, 11, 21, 28, 11, 6, 20), 
               method = "hn")
obj3

# Sainte-Laguë/Webster method
obj4 <- prcalc(jp_lower_2021, 
               m = c(8, 13, 19, 22, 17, 11, 21, 28, 11, 6, 20), 
               method = "sl")
obj4
```

To check the list of various allocation methods provided by {PRcalc}, please [click here](../supplement/list_of_methods.qmd).

### Printing

```{r}
#| label: print
print(obj2, show_total = FALSE) # Hide `Total` column
print(obj2, prop = TRUE) # Show proportion
print(obj2, use_gt = TRUE) # use {gt} package
summary(obj2) # summarize
summary(obj2, prop = TRUE) # summarize with proportion
```

### Visualization

```{r}
#| label: plot
plot(obj1)
plot(obj2)
plot(obj2, angle = 90)
# Output only some parties
plot(obj2, 
     subset_p = c("自民", "公明", "立憲", "維新", "共産", "国民"))
# Output only some district
plot(obj2, 
     subset_p = c("自民", "公明", "立憲", "維新", "共産", "国民"),
     subset_b = c("Tokyo", "Kinki")) 
# Divide the facet by parties
plot(obj2, 
     subset_p  = c("自民", "公明", "立憲", "維新", "共産", "国民"),
     subset_b = c("Tokyo", "Kinki"),
     by        = "party")
# Three columns
plot(obj2, 
     subset_p  = c("自民", "公明", "立憲", "維新", "共産", "国民"),
     subset_b = c("Tokyo", "Kinki"),
     by        = "party",
     facet_col = 3)
# Use different y-axis scales for each facet
plot(obj2, 
     subset_p  = c("自民", "公明", "立憲", "維新", "共産", "国民"),
     subset_b  = c("Tokyo", "Kinki"),
     by        = "party",
     facet_col = 3,
     free_y    = TRUE)
```

## Comparison

You can compare multiple `prcalc` ojbects using `compare()` function. `prcalc` objects must be grouped in a list structure using `list()` function.

```{r}
#| label: compare-1
compare(list(obj2, obj3, obj4))
```

A named list structure is also available.

```{r}
#| label: compare-2
list("Jefferson"     = obj2, 
     "Hare-Niemeyer" = obj3, 
     "Webster"       = obj4) |> 
  compare() 
```

By using `print()` function with `subset` parameter, you can extract subset of the parties.

```{r}
#| label: compare-3
list("Jefferson"     = obj2, 
     "Hare-Niemeyer" = obj3, 
     "Webster"       = obj4) |> 
  compare() |> 
  print(subset = c("自民", "公明", "立憲", "共産", "維新"))
```

If `prop = TRUE`, the proportion is displayed. It is also available to output tables in HTML format using `use_gt = TRUE`.

```{r}
#| label: compare-4
list("Jefferson"     = obj2, 
     "Hare-Niemeyer" = obj3, 
     "Webster"       = obj4) |> 
  compare() |> 
  print(prop = TRUE, use_gt = TRUE)
```

### Visualization

`plot()` function is a method of `prcalc_compare` class. Its return value is ggplot object.

```{r}
#| label: compare-visual-1
list("Jefferson"     = obj2, 
     "Hare-Niemeyer" = obj3, 
     "Webster"       = obj4) |> 
  compare() |> 
  plot()
```

If `facet = TRUE`, the plot is separated by parties.

```{r}
#| label: compare-visual-2
list("Jefferson"     = obj2, 
     "Hare-Niemeyer" = obj3, 
     "Webster"       = obj4) |> 
  compare() |> 
  plot(facet = TRUE)
```

If `facet = TRUE`, you can adjust number of columns and y-axis scale using `facet_col` and `free_y` parameters, respectively.

```{r}
#| label: compare-visual-3
list("Jefferson"     = obj2, 
     "Hare-Niemeyer" = obj3, 
     "Webster"       = obj4) |> 
  compare() |> 
  plot(subset_p = c("自民", "公明", "立憲", "共産", "維新", 
                    "国民", "社民", "れ新", "N党"),
       facet = TRUE, facet_col = 3, free_y = FALSE)
```
