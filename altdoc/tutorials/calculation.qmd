---
title: "Seat allocation"
knitr: 
  opts_chunk: 
    dev: "ragg_png"
    fig.width: 7
    fig.height: 5
    dpi: 150
toc: true
---

```{r}
#| label: setup
#| message: false
library(PRcalc)
library(tidyverse)
```

## Import sample dataset

The first column contains the names of political parties, and the subsequent columns contain the respective number of votes for each party.

```{r}
#| label: dataset
# Korean general election in 2016
# See "str(kr_lower_2016_en)", for the full names of parties
# Number of blocks = 1 (national block)
data("kr_lower_2016_en")
kr_lower_2016_en

# Japanese lower house election in 2019 (in English)
# See "str(jp_lower_2021_en)", for the full names of parties
# Number of blocks = 11 (regional blocks)
data("jp_lower_2021_en")
jp_lower_2021_en
```

## Calculation


To calculate seat allocation using the `prcalc()` function, you need to specify the following: data (`x`), electoral magnitude (`m`), and allocation method (`method`). Below is an example of allocating 47 (`m = 47`) seats using the Hare-Niemeyer method (`method = "hn"`) with the `kr_lower_2016` dataset. In this case, the length of `m` is 1 because number of blocks is 1. Furthermore, by adjusting the `threshold` argument, it is possible to exclude parties with votes below a certain threshold from seat allocation. The follow is an example of threshold is 3% (0.03). Default is `threshold = 0`.
```{r}
#| label: calculation-1
# Example of national block (D'Hondt/Jefferson method)
obj1 <- prcalc(kr_lower_2016_en, m = 47, method = "hn", threshold = 0.03)
obj1
```

In a block system, you need to specify `m` for each block separately. Since `jp_lower_2021` has 11 blocks, the length of `m` also needs to be 11.

```{r}
#| label: calculation-2
# Example of regional block (D'Hondt/Jefferson method; 11 blocks)
obj2 <- prcalc(jp_lower_2021_en, 
               m = c(8, 13, 19, 22, 17, 11, 21, 28, 11, 6, 20), 
               method = "dt")
obj2
```

{PRcalc} offers various allocation methods. Below is an example similar to the previous one, but with the allocation methods changed to the Hare-Niemeyer (`"hn"`) method and the Sainte-Laguë method (`"sl"`).

```{r}
#| label: calculation-3
# Hare-Niemeyer method
obj3 <- prcalc(jp_lower_2021_en, 
               m = c(8, 13, 19, 22, 17, 11, 21, 28, 11, 6, 20), 
               method = "hn")
obj3

# Sainte-Laguë/Webster method
obj4 <- prcalc(jp_lower_2021_en, 
               m = c(8, 13, 19, 22, 17, 11, 21, 28, 11, 6, 20), 
               method = "sl")
obj4
```

Please [click here](../supplement/list_of_methods.qmd) for the list of various allocation methods provided by {PRcalc} and these abbreviations.

### Printing

`print()` and `summary()` functions are a method of `prcalc` object. You can hide a column of "Total" with `show_total = FALSE`.

```{r}
#| label: print-1
print(obj2, show_total = FALSE) # Hide `Total` column
```

In some cases, result is too long. You can adjust length of result using `head` argument. If `head = 10`, only ten rows are displayed. Default is `head = Inf`. (entire rows)

```{r}
#| label: print-2
print(obj2, head = 10) # Show only ten rows.
```

In default, numbers of votes and seats are displayed. If you switch to proportion using `prop = TRUE`.

```{r}
#| label: print-3
print(obj2, head = 5, prop = TRUE)
```

If `use_gt = TRUE`, a result rendered using {[gt](https://gt.rstudio.com/)} package. Furthermore, the `digits` argument allows specifying the number of decimal places for the output. Default is `digits = 3`. In {gt} mode, district magnitudes are not displayed.

```{r}
#| label: print-4
print(obj2, prop = TRUE, use_gt = TRUE, digits = 3)
```

`summary()` function is a useful when number of blocks is large. `summary()` function displays only the total column.

```{r}
#| label: print-5
summary(obj2) # summarize
```

`prop` argument is also allowed in `summary()` function.

```{r}
#| label: print-6
summary(obj2, prop = TRUE) # summarize with proportion
```

### Visualization

{PRcalc} provides `plot()` method for `prcalc` object.

```{r}
#| label: plot-1
plot(obj1)
```

If the number of blocks is two or more, each block is divided into facets.

```{r}
#| label: plot-2
plot(obj2)
```

The `angle` argument allows rotation of the x-axis scale label; the value of `angle` must be between 0 and 90.

```{r}
#| label: plot-3
plot(obj2, angle = 90)
```

Only some parties can be displayed with the `subset_p` argument.

```{r}
#| label: plot-4
# Output only some parties
plot(obj2, 
     subset_p = c("LDP", "NKP", "CDP", "JIP", "JCP", "DPP"))
```

It is also possible to display only some blocks by using the `subset_b` argument.

```{r}
#| label: plot-5
# Output only some district
plot(obj2, 
     subset_p = c("LDP", "NKP", "CDP", "JIP", "JCP", "DPP"),
     subset_b = c("Tokyo", "Kinki")) 
```

If `by = "party"`, the facet is divided based on party. Default is `by = "block"`.

```{r}
#| label: plot-6
# Divide the facet by parties
plot(obj2, 
     subset_p = c("LDP", "NKP", "CDP", "JIP", "JCP", "DPP"),
     subset_b = c("Tokyo", "Kinki"),
     by        = "party")
```

The number of facet columns can be adjusted with `facet_col`.

```{r}
#| label: plot-7
# Three columns
plot(obj2, 
     subset_p = c("LDP", "NKP", "CDP", "JIP", "JCP", "DPP"),
     subset_b = c("Tokyo", "Kinki"),
     by        = "party",
     facet_col = 3)
```

By default, all facets share the same y-axis scale. If you want to use a different scale, set `free_y` to `TRUE`.

```{r}
#| label: plot-8
# Use different y-axis scales for each facet
plot(obj2, 
     subset_p = c("LDP", "NKP", "CDP", "JIP", "JCP", "DPP"),
     subset_b  = c("Tokyo", "Kinki"),
     by        = "party",
     facet_col = 3,
     free_y    = TRUE)
```

## Comparison

You can compare multiple `prcalc` ojbects using `compare()` function. `prcalc` objects must be grouped in a list structure using `list()` function.

```{r}
#| label: compare-1
compare(list(obj2, obj3, obj4))
```

A named list structure is also available.

```{r}
#| label: compare-2
list("Jefferson"     = obj2, 
     "Hare-Niemeyer" = obj3, 
     "Webster"       = obj4) |> 
  compare() 
```

By using `print()` function with `subset` parameter, you can extract subset of the parties.

```{r}
#| label: compare-3
list("Jefferson"     = obj2, 
     "Hare-Niemeyer" = obj3, 
     "Webster"       = obj4) |> 
  compare() |> 
  print(subset = c("LDP", "NKP", "CDP", "JIP", "JCP", "DPP"))
```

If `prop = TRUE`, the proportion is displayed. It is also available to output tables in HTML format using `use_gt = TRUE`.

```{r}
#| label: compare-4
list("Jefferson"     = obj2, 
     "Hare-Niemeyer" = obj3, 
     "Webster"       = obj4) |> 
  compare() |> 
  print(prop = TRUE, use_gt = TRUE)
```

### Visualization

`plot()` function is a method of `prcalc_compare` class. Its return value is ggplot object.

```{r}
#| label: compare-visual-1
list("Jefferson"     = obj2, 
     "Hare-Niemeyer" = obj3, 
     "Webster"       = obj4) |> 
  compare() |> 
  plot()
```

If `facet = TRUE`, the plot is separated by parties.

```{r}
#| label: compare-visual-2
list("Jefferson"     = obj2, 
     "Hare-Niemeyer" = obj3, 
     "Webster"       = obj4) |> 
  compare() |> 
  plot(facet = TRUE)
```

If `facet = TRUE`, you can adjust number of columns and y-axis scale using `facet_col` and `free_y` parameters, respectively.

```{r}
#| label: compare-visual-3
list("Jefferson"     = obj2, 
     "Hare-Niemeyer" = obj3, 
     "Webster"       = obj4) |> 
  compare() |> 
  plot(subset_p = c("LDP", "NKP", "CDP", "JCP", "JIP", 
                    "DPP", "SDP", "Reiwa"),
       facet = TRUE, facet_col = 2, free_y = FALSE)
```

## Customized allocation methods

Although {PRcalc} offers various allocation methods, it may not enough for your needs. In this case you can use fully customizable divisor (`"cd"`), quota (`"cq"`), and $\alpha$-divergence (`"ad"`).

### Custom divisor

For highest averages methods, the number of votes received by each party is divided by the denominator of the determined rule, $r(k)$. For example, $k+1$th divisor of D'Hondt (Jefferson) method is $r(k) = k + 1$, such as $1, 2, 3, \dots$. In this case, we can use `method = "dt"` and we can reproduce this with custom divisors, `method = "cd"`. 

The divisor is specified by the `extra` argument. Since the magnitude is 47 (`m = 47`), division is performed at most 47 times. Therefore, the length of extra must also be 47 or more. In this case, `extra = 1:47`.

```{r}
#| label: custom-1
custom1 <- prcalc(kr_lower_2016_en, m = 47, method = "dt", threshold = 0.03)
custom2 <- prcalc(kr_lower_2016_en, m = 47, method = "cd", threshold = 0.03,
                  extra = 1:47)

list("D'Hondt" = custom1, "Custom divisor" = custom2) |> 
  compare() |> 
  print(use_gt = TRUE)
```

Let's try a super weird divisor here. It shows the same divisor three times repeatedly before going to the next number. That is, the divisor is `c(1, 1, 1, 1, 2, 2, 2, 3, 3, 3, ... , 16, 16, 16)`, a vector of length 48.

```{r}
#| label: custom-2
custom3 <- prcalc(kr_lower_2016_en, m = 47, method = "cd", threshold = 0.03,
                  extra = rep(1:16, each = 3))

list("D'Hondt" = custom1, "Weird divisor" = custom3) |> 
  compare() |> 
  print(use_gt = TRUE)
```

If the number of blocks is greater than or equal to 2, the length of `extra` must be greater than or equal to the maximum value of vector `m`. For example, if the number of block is 3 and `m = c(3, 7, 6)`, then the length of extra must be greater than or equal to 7.

### Custom quota

For largest reminder methods, the first step is to compute quota. For Hare-Niemeyer method, quota is $\frac{v}{m}$, which $v$ is total votes and $m$ is total seats. In 2016 Korean general election (`kr_lower_2016_en`), the total number of votes cast was 23400107 and the district magnitude was 47. Thus, Hare-Niemeyer quota is $\frac{23400107}{47} \simeq 497874.6$. This custom quota must be specified with an `extra` argument.

```{r}
#| label: custom-3
custom4 <- prcalc(kr_lower_2016_en, m = 47, method = "hn")
custom5 <- prcalc(kr_lower_2016_en, m = 47, method = "cq", extra = 497874.6)

list("Hare" = custom4, "Custom quota" = custom5) |> 
  compare() |> 
  print(use_gt = TRUE)
```

The length of `extra` must be 1 or equal to the number of blocks; if the length of `extra` is 1, the same quota is applied to all blocks.

```{r}
#| label: custom-4
custom6 <- prcalc(jp_lower_2021_en, 
                  m      = c(8, 13, 19, 22, 17, 11, 21, 28, 11, 6, 20), 
                  method = "hare")

custom7 <- prcalc(jp_lower_2021_en, 
                  m      = c(8, 13, 19, 22, 17, 11, 21, 28, 11, 6, 20), 
                  method = "cq",
                  extra  = colSums(jp_lower_2021_en[, -1]) / 
                    c(8, 13, 19, 22, 17, 11, 21, 28, 11, 6, 20))

list("Hare" = custom6, "Custom quota" = custom7) |> 
  compare() |> 
  print(use_gt = TRUE)
```

### $\alpha$-divergence

$\alpha$-divergence (`method = "ad"`) is a highly flexible (not fully customizable) highest averages method. A divisor ($r(k)$) is calculated as follow:

$$
r(k) = \begin{cases}
\frac{1}{e} \frac{(k + 1)^{k + 1}}{k^k}& \mbox{if}\quad\alpha = 1,\\
\frac{1}{\log{\frac{k + 1}{k}}} & \mbox{if}\quad\alpha = 0,\\
\Bigl(\frac{(k + 1)^\alpha - k^\alpha}{\alpha}\Bigr)^{\frac{1}{\alpha - 1}} & \mbox{otherwise.}\\
\end{cases}
$$

For example, if $\alpha = 2$, the divisor of $\alpha$-divergence is known to coincide with that of Sainte-Laguë (Webster). $\alpha$ must be specified with an `extra` argument.

```{r}
#| message: false
# Jefferson vs alpha = 10
list(prcalc(kr_lower_2016_en, m = 47, threshold = 0.03, 
            method = "sl"),
     prcalc(kr_lower_2016_en, m = 47, threshold = 0.03, 
            method = "ad", extra = 2)) |> 
  compare() |> 
  print(use_gt = TRUE)
```
