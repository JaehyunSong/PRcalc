---
title: "Measuring disproportionality"
knitr: 
  opts_chunk: 
    dev: "ragg_png"
    fig.width: 7
    fig.height: 5
    dpi: 150
    error: true
toc: true
---

## Preparation

```{r}
#| label: setup
#| message: false
library(PRcalc)
library(tidyverse)
```

```{r}
#| label: dataset
data("jp_lower_2021_en")

# D'Hondt / Jefferson method
obj1 <- prcalc(jp_lower_2021_en, 
               m = c(8, 13, 19, 22, 17, 11, 21, 28, 11, 6, 20), 
               method = "dt")

# Hare-Niemeyer method
obj2 <- prcalc(jp_lower_2021_en, 
               m = c(8, 13, 19, 22, 17, 11, 21, 28, 11, 6, 20), 
               method = "hare")

# Sainte-Laguë / Webster method
obj3 <- prcalc(jp_lower_2021_en, 
               m = c(8, 13, 19, 22, 17, 11, 21, 28, 11, 6, 20), 
               method = "sl")

list("Jefferson" = obj1,
     "Hare"      = obj2,
     "Webster"   = obj3) |> 
  compare() |> 
  print(use_gt = TRUE)
```

## Calculation of disproportionality indices.

* Some parameters are required for calculation of indices. Default is 2.
   * `k`：For Generalized Gallagher
   * `eta`：For Atkinson
   * `alpha`：For $\alpha$-divergence

```{r}
#| label: index-1
index1 <- index(obj1) # k = 2; eta = 2; alpha = 2
index1
```

```{r}
#| label: index-2
index2 <- index(obj1, alpha = 1) # k = 2; eta = 2; alpha = 1
index2
```

### Printing

You can extract specific indices using `[` operator. 

```{r}
#| label: print-1
# Extract Gallagher index.
index1["gallagher"]
```

```{r}
#| label: print-2
# Extract Gallagher index and alpha-divergence.
index1[c("gallagher", "ad")]
```

The identifiers for each indicator are as follows:

```{r}
#| label: print-id
#| echo: false

tibble(ID   = attr(index1, "names"),
       Name = attr(index1, "labels")) |> 
  gt()
```

The `subset` argument of `print()` function can be used to output the result in a tabular format.

```{r}
#| label: print-3
# Extract a subset of indices.
print(index1, subset = c("dhondt", "gallagher", "lh", "ad"))
```

The `hide_id` argument can also be used to hide the ID column.

```{r}
#| label: print-4
# Hide ID column.
print(index1, 
      subset  = c("dhondt", "gallagher", "lh", "ad"),
      hide_id = TRUE)
```

The `use_gt` argument can be used to print results using {gt} package.

```{r}
#| label: print-5
# Use {gt} package
print(index2, 
      subset  = c("dhondt", "gallagher", "lh", "ad"),
      hide_id = TRUE,
      use_gt  = TRUE)
```

### Visulaization

```{r}
#| label: index-plot-1
#| fig-height: 6
plot(index2)
plot(index2, style = "lollipop") # lollipop chart
```

```{r}
#| label: index-plot-2
#| fig-height: 2
plot(index2, index = c("dhondt", "gallagher", "lh", "ad"))
```

## Comparison

```{r}
#| label: comparison-1
compare(list(index(obj1), index(obj2), index(obj3)))

compare(list("D'Hondt"      = index(obj1), 
             "Hare"         = index(obj2), 
             "Sainte-Laguë" = index(obj3)))

compare(list("D'Hondt"      = index(obj1), 
             "Hare"         = index(obj2), 
             "Sainte-Laguë" = index(obj3)))|> 
  print(hide_id = TRUE)

compare(list("D'Hondt"      = index(obj1), 
             "Hare"         = index(obj2), 
             "Sainte-Laguë" = index(obj3))) |> 
  print(subset  = c("dhondt", "gallagher", "lh", "ad"),
        hide_id = TRUE,
        use_gt  = TRUE)
```

```{r}
#| label: comparison-visual-1
#| fig-height: 8
compare(list("D'Hondt"      = index(obj1), 
             "Hare"         = index(obj2), 
             "Sainte-Laguë" = index(obj3))) |> 
  plot() +
  ggplot2::labs(x = "Values", y = "Indices", fill = "Method")
```

## Marginal and joint distribution

For illustration purposes, we extract some parties and districts from `jp_lower_2021_en` and allocate seats.

```{r}
tiny_data <- jp_lower_2021_en |> 
  filter(Party %in% c("LDP", "NKP", "CDP", "JCP", "JIP")) |> 
  select(Party, Tokyo, Tokai, Kinki, Kyushu)

tiny_obj <- prcalc(tiny_data, m = c(30, 20, 40, 20), method = "dt")
tiny_obj
index(tiny_obj)["ad"]
```

Calculating $\alpha$-diveregen from `tiny_obj` yields a result of `r round(index(tiny_obj)["ad"], 5)` ($\alpha$ = 2). Disproportionality is calculated based on the number of votes and seats. However, if the same party spans multiple districts, the results will vary depending on how votes and seats are defined. {PRcalc} defines the number of votes and seats obtained using the marginal or simultaneous distribution of the vote and seat matrices.

```{r}
#| echo: false
library(gt)
temp_obj <- tiny_obj
temp_obj$raw[6, ]  <- c("Total", colSums(tiny_obj$raw[, -1]))
temp_obj$dist[6, ] <- c("Total", colSums(tiny_obj$dist[, -1]))

temp_raw  <- temp_obj$raw |> 
  mutate(across(-1, \(x) as.numeric(x)))
temp_dist <- temp_obj$dist |> 
  mutate(across(-1, \(x) as.numeric(x)))

temp_raw$Total  <- rowSums(temp_raw[, -1])
temp_dist$Total <- rowSums(temp_dist[, -1])
```

### Using marginal distribution of rows

When parties (level 2) span districts (level 1), as in `tiny_obj`, the marginal distribution of rows (level 2) can be used as the number of votes and seats. That is, the sum of the votes and seats won by each party in each district is used. 

```{r}
#| echo: false
temp_raw |> 
  gt() |> 
  data_color(columns = 6, rows = 1:5, palette = "royalblue")

temp_dist |> 
  gt() |> 
  data_color(columns = 6, rows = 1:5, palette = "royalblue")

tibble(Party = temp_raw$Party[1:5],
       Vote  = temp_raw$Total[1:5],
       Seat  = temp_dist$Total[1:5]) |> 
  gt()
```

Use the peripheral distribution of rows by setting `unit = "l2"`, which is the default.

```{r}
index(tiny_obj, unit = "l2")["ad"]
```

However, if level 2 is completely nested instead of spanning level 1, then the marginalization of level 2 is meaningless. In this case, we recommend peripheral distribution of level 1 (`"l1"`) or joint distribution (`"joint"`).

### Using marginal distribution of columns

If `unit = "l1"`, the marginal distribution of column (level 1; in this example, district) is used as the number of votes and seats.

```{r}
#| echo: false
temp_raw |> 
  gt() |> 
  data_color(columns = 2:5, rows = 6, palette = "royalblue")

temp_dist |> 
  gt() |> 
  data_color(columns = 2:5, rows = 6, palette = "royalblue")

tibble(Party = names(temp_raw)[2:5],
       Vote  = unlist(temp_raw[6, 2:5]),
       Seat  = unlist(temp_dist[6, 2:5])) |> 
  gt()
```

```{r}
index(tiny_obj, unit = "l1")["ad"]
```

The $\alpha$-divergence in the case of marginalization in district matches the value of reapportionment-stage in decomposition.

### Using joint distritubion

If `unit = "joint"`, the votes and seats won by each party in their respective districts are used as is.

```{r}
#| echo: false
temp_raw |> 
  gt() |> 
  data_color(columns = 2:5, rows = 1:5, palette = "royalblue")

temp_dist |> 
  gt() |> 
  data_color(columns = 2:5, rows = 1:5, palette = "royalblue")

temp_raw[1:5, 1:5] |> 
  pivot_longer(cols      = -Party,
               names_to  = "Pref",
               values_to = "Vote") |> 
  left_join(temp_dist[1:5, 1:5] |> 
              pivot_longer(cols      = -Party,
                           names_to  = "Pref",
                           values_to = "Seat"),
            by = c("Party", "Pref")) |> 
  mutate(Party_Pref = paste(Party, Pref, sep = "_"),
         .before    = Party) |> 
  select(-Party, -Pref) |> 
  gt()
```

```{r}
index(tiny_obj, unit = "joint")["ad"]
```

### `index()` and `decompose()`

```{r}
decompose(tiny_obj)
```

The $\alpha$-divergence in the case of marginalization in district (`unit = "l1"`) matches the value of reapportionment-stage in decomposition.

```{r}
index(tiny_obj, unit = "l1")["ad"]
```

The $\alpha$-divergence based on joint distribution (`unit = "joint"`) is consistent with $\alpha$-divergence in decomposition.

```{r}
index(tiny_obj, unit = "joint")["ad"]
```
